// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX22/Uxhf+V6z5/aS+uGsnoAr5qVCoFKmlSK1UqTQPI/tk15XtMePZhG1kablULJcQ",
	"KgXCJUBAKUW0uahVy8JS9o/pjr156r9QzYyzu971boLo7SlZj2fOd873feeMF5FN/JAEELAIWYsosivg",
	"Y/nvCUoJFf+ElIRAmQvysU0cEH8diGzqhswlAbLQ7sqd7vZ2un4O6WiOUB8zZCE3YIemkY5YLQT1E8pA",
	"UawjH6IIl8ee02k/Ss5t93dGjLpBGcWxjiicqboUHGSdVlD6h83GOjoJC6eAjaIOsF8QLQSmpXcv8htL",
	"fHN1NJyOGC6P3ZWsX0o3X+8LUkYW0DJc2PM+mUPW6UX0fwpzyEL/M/oUGFn9jSyPWB9OxHXGp7Gy3WnW",
	"tZnjQxy8d7iAgyGUroNm49lYPHaDOaKIDhi2JWbwseshCzFc8wj9unb2/Qph4lnJJj7Ss+qiz+Sy9kUF",
	"B2WkoyoVeyqMhZFlGL29pQqOKgFxoOTAvCGqnM9GnfJOpJ0CFjFCQYOz2A890BjRHPBJEDGKGWgkhACH",
	"rnaoZCIdea4NQQR9stHRENsV0Kblch7MwsJCCcvlEqFlI9sbGR/NfHDi5Kcn3p0umaUK8z2pAZd5UIQL",
	"6WgeaKRQT5XMkilez1AhCx2Sj3QUYlaR3BkhKJeVlRTyeXevP+fLt9KfW2nrYae5mVyuJ2uX05WnSeN5",
	"98JvfONhd6u9u7qV3r2oZYQrm/xeP/9lgGRgisVZMw6y0Idu4AigMj7FPjCgkZRdPqoIcP+7bvtS0trQ",
	"hpWdFV5i7rS+6bZX+L0HGsNlrdN8qdlYvi12iRfmsVcFaUvM0KxSErLQmSrQWl8jDJcFJqVzKWgGvgww",
	"aj71AFOKa+J3xGqSCKFt6Yyh+kl0Av5anW98L5NJbu7sXloeymTK1DrNZ0Owp8xxiD3Xd1kO8r4NLp4V",
	"7opCIkQldkyb5p6lIFBtIAw915Z8GV9FIoHFfLmb9U7zWbpV50s3BdWvr/LNG4NlVq1gyjTNHtKPXUxQ",
	"1rQkC7GkoaDWk1qP6jtD1Y9HbJo0bvArD/fUyBur3UdPlZnncNVjB0i3j2sSHDWGCgDkRoXMs+r7mNZ6",
	"VlIOyptFIAxJVGA/3rjHWy+TWztZSn+8usafnE8erKn8nv+Utpb55m2+9lSsNO4ouSkQxRY86ggHItVo",
	"IWLHiFN7QxUkt3b44wedZp0vP0uvrg7w3+tyn6tmq0h3iBpAuX3XfijaNyqWvFYOMp1GSek+OacKyV/8",
	"2mnf55u39xTSm+n9scNoFeK3dooS4qSMD2CUg+c+JnGFQuU+lPI/aYpqAGdDsBk4GmTvDBpjWORyWY4l",
	"Y9F1YuUKD1jBXSlZf5EsbWkzxzXeWN+9szHqkU5z6c0MclyGUh6ZOKSkqkTQgeGn7jmyYYsB2+/XrjMi",
	"snHNu/hmNNq8DxeUI+N7rxT/ldaXR1R40egzqfrkgFbfktDs0nGsJrnZj9LswjNM6aC3x8+/KdOc6k3s",
	"v10A5l/G6bi+KWvBGzv/Yu+YoKoJksl6J9D5YqKTtR/52g5/VefL36bXt/njC7nbuGUYHrGxVyERs46Y",
	"R8yCm136st1pXhl7RP/rIsxu5uLLosQgsCFg8hNl3JnJL1e72zcPdiaDiOUPnY3/DAAA//+HVrV1Pw8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
