openapi: "3.0.0"
info:
  version: 1.0.0
  title: Taylor's Petstore
  description: Taylor's Petstore example to demonstrate openapi 3.0
  contact:
    name: Taylor Zhang
    email: taylorzyx@hotmail.com
    url: https://taylorzyx.hashnode.dev/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080
    description: 本地开发环境
  - url: https://taylorpetstore.dev.tencent.com
    description: 线上开发环境
  - url: https://taylorpetstore.test.tencent.com
    description: 线上测试环境
paths:
  /pets:
    get:
      summary: 获取所有 pet 的信息
      description: |
        获取系统中所有用户能够访问的 pet 的信息。
      operationId: findPets
      parameters:
        - name: tags
          in: query
          description: 用来过滤 pet 的标签
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
          examples:
            仅返回 tag 为 cat 的 pet:
              value: ['cat']
        - name: limit
          in: query
          description: 返回的最大 pet 数量
          required: false
          schema:
            type: integer
            format: int32
          examples:
            10 个 pet:
              value: 10
      responses:
        '200':
          description: 成功的 pet 列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              examples:
                一个简单的例子:
                  value:
                    - id: 1000
                      name: Miao
                      tag: cat
        default:
          description: 错误信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: 创建新的 pet
      description: |
        创建新的 pet，如果 pet 已经存在，则返回错误。
      operationId: addPet
      requestBody:
        description: 要创建并保存的 pet 信息
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
            examples:
              新增一只猫:
                value:
                  name: Miao
                  tag: cat
              新增一只狗:
                value:
                  name: Wang
                  tag: dog
      responses:
        '200':
          description: 成功创建的 pet 信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              examples:
                成功新增一只猫:
                  value:
                    id: 1000
                    name: Miao
                    tag: cat
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    get:
      summary: 根据 ID 获取 pet 信息
      description: |
        根据 ID 获取 pet 信息，如果 pet 不存在，则返回错误。
      operationId: findPetByID
      parameters:
        - name: id
          in: path
          description: 要获取的 pet 的 ID
          required: true
          schema:
            type: integer
            format: int64
          examples:
            简单的例子:
              value: 1001
      responses:
        '200':
          description: 获取到的 pet 信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: 错误信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: 删除 pet
      description: |
        根据 ID 删除 pet，如果 pet 不存在，则返回错误。
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: 要删除的 pet 的 ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 成功删除 pet
        default:
          description: 错误信息
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
        - required:
            - id
          properties:
            id:
              type: integer
              format: int64
              description: pet 的唯一 ID

    NewPet:
      required:
        - name
      properties:
        name:
          type: string
          description: pet 的名字
        tag:
          type: string
          description: pet 的标签

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: 错误码
        message:
          type: string
          description: 错误信息
